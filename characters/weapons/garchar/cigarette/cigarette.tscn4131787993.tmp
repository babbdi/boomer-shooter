[gd_scene load_steps=27 format=3 uid="uid://duy6m58y14cya"]

[ext_resource type="PackedScene" uid="uid://xrf1akpj6sr" path="res://characters/weapons/garchar/cigarette/cigarette.blend" id="1_by56w"]
[ext_resource type="Texture2D" uid="uid://c563okwc05dqo" path="res://characters/weapons/logic/muzzle_flash/muzzle_flash.png" id="2_8tfdj"]
[ext_resource type="Texture2D" uid="uid://cpo6pw42n8es4" path="res://debug/weapons/zapper/zapper_muzzle_flash.png" id="3_bad4a"]
[ext_resource type="Shader" uid="uid://kixarvbtlyu0" path="res://characters/weapons/garchar/cigarette/dissolve_shader.gdshader" id="4_ytl62"]
[ext_resource type="Texture2D" uid="uid://ijchxtdlvibo" path="res://characters/weapons/garchar/cigarette/cigarette.jpg" id="5_aenhf"]

[sub_resource type="GDScript" id="GDScript_aenhf"]
script/source = "extends Node3D
var delta 
var condition : int :
	set(v):
		condition = v
		print(condition)
# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	condition = 8

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	delta = delta
	match condition:
		7:
			$cigarrete/top.get_surface_override_material(0).set(\"shader_parameter/dissolveSlider\", lerpp(0.520, delta))

func lerpp(value_to, delta):
	return lerpf($cigarrete/top.get_surface_override_material(0).get(\"shader_parameter/dissolveSlider\"), value_to, 10 * delta)
"

[sub_resource type="Animation" id="Animation_aenhf"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("cigarrete:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(-0.316863, 0.617901, -0.795417)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("cigarrete:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector3(1, 1, -1)]
}

[sub_resource type="Animation" id="Animation_bad4a"]
resource_name = "idle"
length = 32.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("cigarrete:rotation")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 2.03333, 6, 8.03333, 16.1, 18),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 0,
"values": [Vector3(-0.302256, -8.94497e-09, -0.267), Vector3(-0.302256, -8.94497e-09, -0.267), Vector3(-0.302256, -8.94497e-09, -0.267), Vector3(-0.302256, -8.94497e-09, -0.267), Vector3(-0.316863, 0.617901, -0.795417), Vector3(-0.424615, 1.12468, -1.51688)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("cigarrete:position")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 2.03333, 6, 8.03333, 16.1, 18),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 0,
"values": [Vector3(0, 0, 0), Vector3(0, -0.125, 0), Vector3(-0.085, 0.27, -0.095), Vector3(0.11, -0.13, -0.25), Vector3(1, 1, -1), Vector3(-0.728488, 0.863636, -0.385816)]
}

[sub_resource type="Animation" id="Animation_ytl62"]
resource_name = "shoot"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("cigarrete:rotation")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.133333, 0.466667, 0.733333, 1),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 0,
"values": [Vector3(-0.302256, 0, -0.267), Vector3(-0.871948, 0.619593, -1.06172), Vector3(-0.871948, 0.881392, -1.06172), Vector3(-0.302256, 0, -0.267), Vector3(-0.302256, 0, -0.267)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("cigarrete:position")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.466667, 0.733333, 1),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [Vector3(0, -0.125, 0), Vector3(2.5, 0, -2.5), Vector3(0, 0, 0), Vector3(0, -0.125, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_aenhf"]
_data = {
&"RESET": SubResource("Animation_aenhf"),
&"idle": SubResource("Animation_bad4a"),
&"shoot": SubResource("Animation_ytl62")
}

[sub_resource type="ShaderMaterial" id="ShaderMaterial_aenhf"]
render_priority = 0
shader = ExtResource("4_ytl62")
shader_parameter/baseColor = Color(1, 1, 1, 1)
shader_parameter/baseColorTexture = ExtResource("5_aenhf")
shader_parameter/dissolveSlider = -1.0
shader_parameter/dissolveNoiseScale = 8.785
shader_parameter/edgeNoiseScale = -2.32
shader_parameter/edgesThickness = 0.145
shader_parameter/edgeColor = Color(0.54091, 0.232073, 4.81308e-08, 1)
shader_parameter/edgeEmissionSlider = 10.0
shader_parameter/enable_dissolve_animation = true
shader_parameter/animation_speed = 1.7
shader_parameter/animation_intensity = 0.14

[sub_resource type="Shader" id="Shader_aenhf"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx;

// Varyings
varying vec3 worldPos;
varying vec3 localPos;
varying vec2 uv;

// Group: Base Color 
group_uniforms base_color;
uniform vec4 baseColor : source_color = vec4(1.0);
uniform sampler2D baseColorTexture : source_color; 

// Group: Extra Maps
group_uniforms extra_maps;
uniform sampler2D normalTexture : hint_normal;            
uniform sampler2D aoTexture : hint_default_white;           
uniform sampler2D heightTexture : hint_default_black;      
uniform sampler2D roughnessTexture : hint_default_white;    

// Group: Dissolve
group_uniforms dissolve;
uniform float dissolveSlider : hint_range(-1.0, 1.5) = 0.0; 
uniform float dissolveNoiseScale = 2.0; 

// Group: Edges
group_uniforms edges;
uniform float edgeNoiseScale : hint_range(-10.0, 0.0, 0.01) = 0.0;  
uniform float edgesThickness : hint_range(0, 0.3) = 0.01;
uniform vec4 edgeColor : source_color = vec4(0.0, 0.0, 1.0, 1.0);
uniform float edgeEmissionSlider : hint_range(0.0, 10.0, 0.01) = 1.0;

// Group: Animation
group_uniforms animation;
uniform bool enable_dissolve_animation = false;
uniform float animation_speed : hint_range(0.0, 5.0, 0.1) = 1.0;
uniform float animation_intensity : hint_range(0.0, 1.0, 0.01) = 0.2;

// Perlin Noise Functions
vec3 mod289_vec3(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec4 mod289_vec4(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec4 permute(vec4 x) { return mod289_vec4(((x * 34.0) + 1.0) * x); }
vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }
vec3 fade(vec3 t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }

float cnoise(vec3 P) {
    vec3 Pi0 = floor(P);
    vec3 Pi1 = Pi0 + vec3(1.0);
    Pi0 = mod289_vec3(Pi0);
    Pi1 = mod289_vec3(Pi1);
    vec3 Pf0 = fract(P);
    vec3 Pf1 = Pf0 - vec3(1.0);
    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
    vec4 iy = vec4(Pi0.yy, Pi1.yy);
    vec4 iz0 = vec4(Pi0.z);
    vec4 iz1 = vec4(Pi1.z);
    vec4 ixy = permute(permute(ix) + iy);
    vec4 ixy0 = permute(ixy + iz0);
    vec4 ixy1 = permute(ixy + iz1);
    vec4 gx0 = ixy0 * (1.0 / 7.0);
    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
    gx0 = fract(gx0);
    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
    vec4 sz0 = step(gz0, vec4(0.0));
    gx0 -= sz0 * (step(0.0, gx0) - 0.5);
    gy0 -= sz0 * (step(0.0, gy0) - 0.5);
    vec4 gx1 = ixy1 * (1.0 / 7.0);
    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
    gx1 = fract(gx1);
    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
    vec4 sz1 = step(gz1, vec4(0.0));
    gx1 -= sz1 * (step(0.0, gx1) - 0.5);
    gy1 -= sz1 * (step(0.0, gy1) - 0.5);
    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);
    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);
    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);
    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);
    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);
    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);
    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);
    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);
    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
    g000 *= norm0.x;
    g010 *= norm0.y;
    g100 *= norm0.z;
    g110 *= norm0.w;
    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
    g001 *= norm1.x;
    g011 *= norm1.y;
    g101 *= norm1.z;
    g111 *= norm1.w;
    float n000 = dot(g000, Pf0);
    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
    float n111 = dot(g111, Pf1);
    vec3 fade_xyz = fade(Pf0);
    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
    return 2.2 * n_xyz;
}

void vertex() {
    worldPos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
    localPos = VERTEX;
    uv = UV;
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, POSITION.w, 0.9);
}

void fragment() {
    // Compute parallax UV coordinates using height mapping.
    // (If no height texture is assigned, the default black returns 0.)
    vec2 texUV = uv;
    float height = texture(heightTexture, uv).r;
    float heightScale = 0.05; // Adjust for parallax intensity.
    vec3 viewDir = normalize(VIEW);
    vec3 T = normalize(TANGENT);
    vec3 B = normalize(cross(NORMAL, T));
    vec2 parallaxOffset = vec2(dot(viewDir, T), dot(viewDir, B)) * height * heightScale;
    texUV += parallaxOffset;
    
    // Compute base albedo using the base color texture.
    vec4 albedoColor = baseColor * texture(baseColorTexture, texUV);
    
    // Apply normal mapping.
    // (If no normal texture is assigned, the default neutral normal is used.)
    vec3 nMap = texture(normalTexture, texUV).rgb;
    nMap = nMap * 2.0 - 1.0;
    T = normalize(TANGENT);
    B = normalize(cross(NORMAL, T));
    NORMAL = normalize(T * nMap.x + B * nMap.y + NORMAL * nMap.z);
    
    // Set ambient occlusion.
    // (Default white AO texture yields AO = 1.0)
    AO = texture(aoTexture, texUV).r;
    
    // Set roughness.
    ROUGHNESS = texture(roughnessTexture, texUV).r;
    
    // Dissolve and edge effects.
    float dissolveNoise = cnoise(localPos * dissolveNoiseScale) * 0.5 + 0.5;
    float edgeNoise = cnoise(localPos * edgeNoiseScale) * 0.5 + 0.5;
    float animatedDissolve = (1.0 - (dissolveSlider + 0.5)) + dissolveNoise;
    
    if (enable_dissolve_animation) {
        float time_factor = TIME * animation_speed;
        animatedDissolve += animation_intensity *
            (sin(time_factor + localPos.x * 2.0 +
                 localPos.y * 1.5 + localPos.z * 2.5) * 0.5 + 0.5);
    }
    animatedDissolve = clamp(animatedDissolve, 0.0, 1.0);
    float dissolveFactor = step(edgeNoise, animatedDissolve);
    float edgeMask = step(edgeNoise, animatedDissolve) - step(edgeNoise, animatedDissolve - edgesThickness);
    vec3 edgeEmission = edgeMask * edgeColor.rgb * edgeEmissionSlider;

    ALBEDO = albedoColor.rgb;
    ALPHA = dissolveFactor;
    EMISSION = edgeEmission;
    ALPHA_SCISSOR_THRESHOLD = 0.5;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1q1us"]
render_priority = 0
shader = SubResource("Shader_aenhf")
shader_parameter/baseColor = Color(1, 1, 1, 1)
shader_parameter/baseColorTexture = ExtResource("5_aenhf")
shader_parameter/dissolveSlider = -1.0
shader_parameter/dissolveNoiseScale = 8.785
shader_parameter/edgeNoiseScale = -2.32
shader_parameter/edgesThickness = 0.145
shader_parameter/edgeColor = Color(0.54091, 0.232073, 4.81308e-08, 1)
shader_parameter/edgeEmissionSlider = 10.0
shader_parameter/enable_dissolve_animation = true
shader_parameter/animation_speed = 1.7
shader_parameter/animation_intensity = 0.14

[sub_resource type="Shader" id="Shader_iwv4m"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx;

// Varyings
varying vec3 worldPos;
varying vec3 localPos;
varying vec2 uv;

// Group: Base Color 
group_uniforms base_color;
uniform vec4 baseColor : source_color = vec4(1.0);
uniform sampler2D baseColorTexture : source_color; 

// Group: Extra Maps
group_uniforms extra_maps;
uniform sampler2D normalTexture : hint_normal;            
uniform sampler2D aoTexture : hint_default_white;           
uniform sampler2D heightTexture : hint_default_black;      
uniform sampler2D roughnessTexture : hint_default_white;    

// Group: Dissolve
group_uniforms dissolve;
uniform float dissolveSlider : hint_range(-1.0, 1.5) = 0.0; 
uniform float dissolveNoiseScale = 2.0; 

// Group: Edges
group_uniforms edges;
uniform float edgeNoiseScale : hint_range(-10.0, 0.0, 0.01) = 0.0;  
uniform float edgesThickness : hint_range(0, 0.3) = 0.01;
uniform vec4 edgeColor : source_color = vec4(0.0, 0.0, 1.0, 1.0);
uniform float edgeEmissionSlider : hint_range(0.0, 10.0, 0.01) = 1.0;

// Group: Animation
group_uniforms animation;
uniform bool enable_dissolve_animation = false;
uniform float animation_speed : hint_range(0.0, 5.0, 0.1) = 1.0;
uniform float animation_intensity : hint_range(0.0, 1.0, 0.01) = 0.2;

// Perlin Noise Functions
vec3 mod289_vec3(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec4 mod289_vec4(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec4 permute(vec4 x) { return mod289_vec4(((x * 34.0) + 1.0) * x); }
vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }
vec3 fade(vec3 t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }

float cnoise(vec3 P) {
    vec3 Pi0 = floor(P);
    vec3 Pi1 = Pi0 + vec3(1.0);
    Pi0 = mod289_vec3(Pi0);
    Pi1 = mod289_vec3(Pi1);
    vec3 Pf0 = fract(P);
    vec3 Pf1 = Pf0 - vec3(1.0);
    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
    vec4 iy = vec4(Pi0.yy, Pi1.yy);
    vec4 iz0 = vec4(Pi0.z);
    vec4 iz1 = vec4(Pi1.z);
    vec4 ixy = permute(permute(ix) + iy);
    vec4 ixy0 = permute(ixy + iz0);
    vec4 ixy1 = permute(ixy + iz1);
    vec4 gx0 = ixy0 * (1.0 / 7.0);
    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
    gx0 = fract(gx0);
    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
    vec4 sz0 = step(gz0, vec4(0.0));
    gx0 -= sz0 * (step(0.0, gx0) - 0.5);
    gy0 -= sz0 * (step(0.0, gy0) - 0.5);
    vec4 gx1 = ixy1 * (1.0 / 7.0);
    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
    gx1 = fract(gx1);
    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
    vec4 sz1 = step(gz1, vec4(0.0));
    gx1 -= sz1 * (step(0.0, gx1) - 0.5);
    gy1 -= sz1 * (step(0.0, gy1) - 0.5);
    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);
    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);
    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);
    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);
    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);
    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);
    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);
    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);
    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
    g000 *= norm0.x;
    g010 *= norm0.y;
    g100 *= norm0.z;
    g110 *= norm0.w;
    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
    g001 *= norm1.x;
    g011 *= norm1.y;
    g101 *= norm1.z;
    g111 *= norm1.w;
    float n000 = dot(g000, Pf0);
    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
    float n111 = dot(g111, Pf1);
    vec3 fade_xyz = fade(Pf0);
    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
    return 2.2 * n_xyz;
}

void vertex() {
    worldPos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
    localPos = VERTEX;
    uv = UV;
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, POSITION.w, 0.9);
}

void fragment() {
    // Compute parallax UV coordinates using height mapping.
    // (If no height texture is assigned, the default black returns 0.)
    vec2 texUV = uv;
    float height = texture(heightTexture, uv).r;
    float heightScale = 0.05; // Adjust for parallax intensity.
    vec3 viewDir = normalize(VIEW);
    vec3 T = normalize(TANGENT);
    vec3 B = normalize(cross(NORMAL, T));
    vec2 parallaxOffset = vec2(dot(viewDir, T), dot(viewDir, B)) * height * heightScale;
    texUV += parallaxOffset;
    
    // Compute base albedo using the base color texture.
    vec4 albedoColor = baseColor * texture(baseColorTexture, texUV);
    
    // Apply normal mapping.
    // (If no normal texture is assigned, the default neutral normal is used.)
    vec3 nMap = texture(normalTexture, texUV).rgb;
    nMap = nMap * 2.0 - 1.0;
    T = normalize(TANGENT);
    B = normalize(cross(NORMAL, T));
    NORMAL = normalize(T * nMap.x + B * nMap.y + NORMAL * nMap.z);
    
    // Set ambient occlusion.
    // (Default white AO texture yields AO = 1.0)
    AO = texture(aoTexture, texUV).r;
    
    // Set roughness.
    ROUGHNESS = texture(roughnessTexture, texUV).r;
    
    // Dissolve and edge effects.
    float dissolveNoise = cnoise(localPos * dissolveNoiseScale) * 0.5 + 0.5;
    float edgeNoise = cnoise(localPos * edgeNoiseScale) * 0.5 + 0.5;
    float animatedDissolve = (1.0 - (dissolveSlider + 0.5)) + dissolveNoise;
    
    if (enable_dissolve_animation) {
        float time_factor = TIME * animation_speed;
        animatedDissolve += animation_intensity *
            (sin(time_factor + localPos.x * 2.0 +
                 localPos.y * 1.5 + localPos.z * 2.5) * 0.5 + 0.5);
    }
    animatedDissolve = clamp(animatedDissolve, 0.0, 1.0);
    float dissolveFactor = step(edgeNoise, animatedDissolve);
    float edgeMask = step(edgeNoise, animatedDissolve) - step(edgeNoise, animatedDissolve - edgesThickness);
    vec3 edgeEmission = edgeMask * edgeColor.rgb * edgeEmissionSlider;

    ALBEDO = albedoColor.rgb;
    ALPHA = dissolveFactor;
    EMISSION = edgeEmission;
    ALPHA_SCISSOR_THRESHOLD = 0.5;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_gg8b4"]
render_priority = 0
shader = SubResource("Shader_iwv4m")
shader_parameter/baseColor = Color(1, 1, 1, 1)
shader_parameter/baseColorTexture = ExtResource("5_aenhf")
shader_parameter/dissolveSlider = -1.0
shader_parameter/dissolveNoiseScale = 8.785
shader_parameter/edgeNoiseScale = -2.32
shader_parameter/edgesThickness = 0.145
shader_parameter/edgeColor = Color(0.54091, 0.232073, 4.81308e-08, 1)
shader_parameter/edgeEmissionSlider = 10.0
shader_parameter/enable_dissolve_animation = true
shader_parameter/animation_speed = 1.7
shader_parameter/animation_intensity = 0.14

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ytl62"]
render_priority = 0
shader = SubResource("Shader_iwv4m")
shader_parameter/baseColor = Color(1, 1, 1, 1)
shader_parameter/baseColorTexture = ExtResource("5_aenhf")
shader_parameter/dissolveSlider = -1.0
shader_parameter/dissolveNoiseScale = 8.785
shader_parameter/edgeNoiseScale = -2.32
shader_parameter/edgesThickness = 0.145
shader_parameter/edgeColor = Color(0.54091, 0.232073, 4.81308e-08, 1)
shader_parameter/edgeEmissionSlider = 10.0
shader_parameter/enable_dissolve_animation = true
shader_parameter/animation_speed = 1.7
shader_parameter/animation_intensity = 0.14

[sub_resource type="Shader" id="Shader_epqnd"]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert, specular_schlick_ggx;

// Varyings
varying vec3 worldPos;
varying vec3 localPos;
varying vec2 uv;

// Group: Base Color 
group_uniforms base_color;
uniform vec4 baseColor : source_color = vec4(1.0);
uniform sampler2D baseColorTexture : source_color; 

// Group: Extra Maps
group_uniforms extra_maps;
uniform sampler2D normalTexture : hint_normal;            
uniform sampler2D aoTexture : hint_default_white;           
uniform sampler2D heightTexture : hint_default_black;      
uniform sampler2D roughnessTexture : hint_default_white;    

// Group: Dissolve
group_uniforms dissolve;
uniform float dissolveSlider : hint_range(-1.0, 1.5) = 0.0; 
uniform float dissolveNoiseScale = 2.0; 

// Group: Edges
group_uniforms edges;
uniform float edgeNoiseScale : hint_range(-10.0, 0.0, 0.01) = 0.0;  
uniform float edgesThickness : hint_range(0, 0.3) = 0.01;
uniform vec4 edgeColor : source_color = vec4(0.0, 0.0, 1.0, 1.0);
uniform float edgeEmissionSlider : hint_range(0.0, 10.0, 0.01) = 1.0;

// Group: Animation
group_uniforms animation;
uniform bool enable_dissolve_animation = false;
uniform float animation_speed : hint_range(0.0, 5.0, 0.1) = 1.0;
uniform float animation_intensity : hint_range(0.0, 1.0, 0.01) = 0.2;

// Perlin Noise Functions
vec3 mod289_vec3(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec4 mod289_vec4(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
vec4 permute(vec4 x) { return mod289_vec4(((x * 34.0) + 1.0) * x); }
vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }
vec3 fade(vec3 t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }

float cnoise(vec3 P) {
    vec3 Pi0 = floor(P);
    vec3 Pi1 = Pi0 + vec3(1.0);
    Pi0 = mod289_vec3(Pi0);
    Pi1 = mod289_vec3(Pi1);
    vec3 Pf0 = fract(P);
    vec3 Pf1 = Pf0 - vec3(1.0);
    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
    vec4 iy = vec4(Pi0.yy, Pi1.yy);
    vec4 iz0 = vec4(Pi0.z);
    vec4 iz1 = vec4(Pi1.z);
    vec4 ixy = permute(permute(ix) + iy);
    vec4 ixy0 = permute(ixy + iz0);
    vec4 ixy1 = permute(ixy + iz1);
    vec4 gx0 = ixy0 * (1.0 / 7.0);
    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
    gx0 = fract(gx0);
    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
    vec4 sz0 = step(gz0, vec4(0.0));
    gx0 -= sz0 * (step(0.0, gx0) - 0.5);
    gy0 -= sz0 * (step(0.0, gy0) - 0.5);
    vec4 gx1 = ixy1 * (1.0 / 7.0);
    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
    gx1 = fract(gx1);
    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
    vec4 sz1 = step(gz1, vec4(0.0));
    gx1 -= sz1 * (step(0.0, gx1) - 0.5);
    gy1 -= sz1 * (step(0.0, gy1) - 0.5);
    vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);
    vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);
    vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);
    vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);
    vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);
    vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);
    vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);
    vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);
    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
    g000 *= norm0.x;
    g010 *= norm0.y;
    g100 *= norm0.z;
    g110 *= norm0.w;
    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
    g001 *= norm1.x;
    g011 *= norm1.y;
    g101 *= norm1.z;
    g111 *= norm1.w;
    float n000 = dot(g000, Pf0);
    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
    float n111 = dot(g111, Pf1);
    vec3 fade_xyz = fade(Pf0);
    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
    return 2.2 * n_xyz;
}

void vertex() {
    worldPos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
    localPos = VERTEX;
    uv = UV;
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, POSITION.w, 0.9);
}

void fragment() {
    // Compute parallax UV coordinates using height mapping.
    // (If no height texture is assigned, the default black returns 0.)
    vec2 texUV = uv;
    float height = texture(heightTexture, uv).r;
    float heightScale = 0.05; // Adjust for parallax intensity.
    vec3 viewDir = normalize(VIEW);
    vec3 T = normalize(TANGENT);
    vec3 B = normalize(cross(NORMAL, T));
    vec2 parallaxOffset = vec2(dot(viewDir, T), dot(viewDir, B)) * height * heightScale;
    texUV += parallaxOffset;
    
    // Compute base albedo using the base color texture.
    vec4 albedoColor = baseColor * texture(baseColorTexture, texUV);
    
    // Apply normal mapping.
    // (If no normal texture is assigned, the default neutral normal is used.)
    vec3 nMap = texture(normalTexture, texUV).rgb;
    nMap = nMap * 2.0 - 1.0;
    T = normalize(TANGENT);
    B = normalize(cross(NORMAL, T));
    NORMAL = normalize(T * nMap.x + B * nMap.y + NORMAL * nMap.z);
    
    // Set ambient occlusion.
    // (Default white AO texture yields AO = 1.0)
    AO = texture(aoTexture, texUV).r;
    
    // Set roughness.
    ROUGHNESS = texture(roughnessTexture, texUV).r;
    
    // Dissolve and edge effects.
    float dissolveNoise = cnoise(localPos * dissolveNoiseScale) * 0.5 + 0.5;
    float edgeNoise = cnoise(localPos * edgeNoiseScale) * 0.5 + 0.5;
    float animatedDissolve = (1.0 - (dissolveSlider + 0.5)) + dissolveNoise;
    
    if (enable_dissolve_animation) {
        float time_factor = TIME * animation_speed;
        animatedDissolve += animation_intensity *
            (sin(time_factor + localPos.x * 2.0 +
                 localPos.y * 1.5 + localPos.z * 2.5) * 0.5 + 0.5);
    }
    animatedDissolve = clamp(animatedDissolve, 0.0, 1.0);
    float dissolveFactor = step(edgeNoise, animatedDissolve);
    float edgeMask = step(edgeNoise, animatedDissolve) - step(edgeNoise, animatedDissolve - edgesThickness);
    vec3 edgeEmission = edgeMask * edgeColor.rgb * edgeEmissionSlider;

    ALBEDO = albedoColor.rgb;
    ALPHA = dissolveFactor;
    EMISSION = edgeEmission;
    ALPHA_SCISSOR_THRESHOLD = 0.5;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_iwv4m"]
render_priority = 0
shader = SubResource("Shader_epqnd")
shader_parameter/baseColor = Color(1, 1, 1, 1)
shader_parameter/baseColorTexture = ExtResource("5_aenhf")
shader_parameter/dissolveSlider = -1.0
shader_parameter/dissolveNoiseScale = 8.785
shader_parameter/edgeNoiseScale = -2.32
shader_parameter/edgesThickness = 0.145
shader_parameter/edgeColor = Color(0.54091, 0.232073, 4.81308e-08, 1)
shader_parameter/edgeEmissionSlider = 10.0
shader_parameter/enable_dissolve_animation = true
shader_parameter/animation_speed = 1.7
shader_parameter/animation_intensity = 0.14

[sub_resource type="Curve" id="Curve_8tfdj"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.0480769, 0.898876), 0.0, 0.0, 0, 0, Vector2(0.346154, 0.752809), 0.0, 0.0, 0, 0, Vector2(0.644231, 0.629214), 1.58587, 1.58587, 0, 0, Vector2(1, 0), 1.40225, 0.0, 0, 0]
point_count = 5

[sub_resource type="CurveTexture" id="CurveTexture_bad4a"]
curve = SubResource("Curve_8tfdj")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_aenhf"]
angle_min = -720.0
angle_max = 720.0
gravity = Vector3(0, 2.5, 0)
scale_max = 1.2
scale_curve = SubResource("CurveTexture_bad4a")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_ytl62"]
transparency = 1
albedo_color = Color(0.788235, 0.772549, 0.745098, 0.294118)
albedo_texture = ExtResource("2_8tfdj")
rim_enabled = true
rim = 0.0
billboard_mode = 3
billboard_keep_scale = true
particles_anim_h_frames = 1
particles_anim_v_frames = 1
particles_anim_loop = false
grow_amount = -9.521

[sub_resource type="QuadMesh" id="QuadMesh_epqnd"]
material = SubResource("StandardMaterial3D_ytl62")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_1q1us"]
angle_min = -720.0
angle_max = 720.0
gravity = Vector3(0, 0, 0)
scale_min = 1.2
scale_max = 1.5
scale_curve = SubResource("CurveTexture_bad4a")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_1q1us"]
transparency = 1
albedo_color = Color(4.97255, 0.584314, 0.313726, 0.866667)
albedo_texture = ExtResource("3_bad4a")
rim_enabled = true
rim_tint = 1.0
rim_texture = ExtResource("3_bad4a")
billboard_mode = 3
billboard_keep_scale = true
particles_anim_h_frames = 1
particles_anim_v_frames = 1
particles_anim_loop = false
grow_amount = -9.521

[sub_resource type="QuadMesh" id="QuadMesh_iwv4m"]
material = SubResource("StandardMaterial3D_1q1us")

[node name="cigarette" instance=ExtResource("1_by56w")]
script = SubResource("GDScript_aenhf")

[node name="AnimationPlayer" type="AnimationPlayer" parent="." index="0"]
libraries = {
&"": SubResource("AnimationLibrary_aenhf")
}
playback_default_blend_time = 1.0
blend_times = [&"idle", &"idle", 2.0, &"idle", &"shoot", 2.0]

[node name="cigarrete" parent="." index="1"]
transform = Transform3D(0.699469, 0.455751, 0.550485, -0.678603, 0.66514, 0.311587, -0.224144, -0.591506, 0.774519, 1, 1, -1)

[node name="bottom" parent="cigarrete" index="0"]
surface_material_override/0 = SubResource("ShaderMaterial_aenhf")

[node name="middle01" parent="cigarrete" index="1"]
surface_material_override/0 = SubResource("ShaderMaterial_1q1us")

[node name="middle02" parent="cigarrete" index="2"]
surface_material_override/0 = SubResource("ShaderMaterial_gg8b4")

[node name="middle03" parent="cigarrete" index="3"]
surface_material_override/0 = SubResource("ShaderMaterial_ytl62")

[node name="top" parent="cigarrete" index="4"]
surface_material_override/0 = SubResource("ShaderMaterial_iwv4m")

[node name="OmniLight3D" type="OmniLight3D" parent="cigarrete" index="5"]
transform = Transform3D(1, 3.72529e-09, 0, 7.45058e-09, 1, -2.98023e-08, 0, 5.96046e-08, 1, -4.47035e-08, 6.18196, 0)
light_color = Color(0.909313, 0.502901, 0, 1)
light_bake_mode = 1
omni_range = 2.126
omni_attenuation = 1.187

[node name="smoke1" type="GPUParticles3D" parent="cigarrete" index="6"]
transform = Transform3D(0.571756, -1.67638e-08, -3.72529e-09, 3.72529e-09, 1, 1.49012e-08, 0, 0, 0.571756, -7.45058e-08, 6.1, 1.19209e-07)
amount = 32
lifetime = 1.63
speed_scale = 0.53
transform_align = 1
process_material = SubResource("ParticleProcessMaterial_aenhf")
draw_pass_1 = SubResource("QuadMesh_epqnd")

[node name="GPUParticles3D3" type="GPUParticles3D" parent="cigarrete" index="7"]
transform = Transform3D(0.571756, -1.67638e-08, -3.72529e-09, 3.72529e-09, 1, 1.49012e-08, 0, 0, 0.571756, -7.45058e-08, 6.1, 1.19209e-07)
emitting = false
amount = 33
lifetime = 2.66
explosiveness = 1.0
randomness = 1.0
local_coords = true
trail_lifetime = 1.48
process_material = SubResource("ParticleProcessMaterial_1q1us")
draw_pass_1 = SubResource("QuadMesh_iwv4m")
